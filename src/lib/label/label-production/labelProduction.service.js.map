{"version":3,"file":"labelProduction.service.js","sourceRoot":"","sources":["labelProduction.service.ts"],"names":[],"mappings":";;;;;;;;;;;AAAA,sCAAyC;AACzC,8CAA2C;AAC3C,6BAA8C;AAC9C,kDAA8C;AAC9C,+BAA4B;AAE5B;IACE,eAAmB,GAAW,EAAS,KAAa,EAAS,IAAY;QAAtD,QAAG,GAAH,GAAG,CAAQ;QAAS,UAAK,GAAL,KAAK,CAAQ;QAAS,SAAI,GAAJ,IAAI,CAAQ;IACzE,CAAC;IACH,YAAC;AAAD,CAAC,AAHD,IAGC;AAHY,sBAAK;AAMlB;IAII,gCAAqB,YAA0B;QAA/C,iBAcC;QAdoB,iBAAY,GAAZ,YAAY,CAAc;QAHvC,WAAM,GAAqB,IAAI,sBAAe,CAAC,EAAE,CAAC,CAAA;QAKtD,IAAI,CAAC,KAAK,GAAG,IAAI,aAAK,CAAC;YACnB,OAAO,EAAE,IAAI,CAAC,YAAY,CAAC,MAAM,CAAC,gBAAgB;SACrD,CAAC,CAAA;QACF,8IAA8I;QAC9I,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,QAAQ,CAAC,UAAA,CAAC,IAAI,OAAA,KAAI,CAAC,KAAK,CAAC,GAAG,CAAC,QAAQ,GAAG,CAAC,GAAG,OAAO,CAAC,EAAtC,CAAsC,CAAC;aACvE,GAAG,CAAC,UAAC,GAAS,IAAK,OAAA,GAAG,CAAC,IAAI,EAAE,EAAV,CAAU,CAAC;aAC9B,KAAK,CAAC,UAAA,CAAC;YACJ,OAAO,CAAC,KAAK,CAAC,+BAA+B,CAAC,CAAA;YAC9C,MAAM,CAAC,uBAAU,CAAC,EAAE,CAAC,EAAE,CAAC,CAAA;QAC5B,CAAC,CAAC;aACD,GAAG,CAAC,UAAA,GAAG,IAAK,OAAA,KAAI,CAAC,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,EAArB,CAAqB,CAAC;aAClC,SAAS,EAAE,CAAA;IACpB,CAAC;IAED,sBAAW,6CAAS;aAApB;YACI,MAAM,CAAC,IAAI,CAAC,YAAY,CAAC,SAAS,CAAC;QACvC,CAAC;;;OAAA;IAED,2CAAU,GAAV,UAAW,IAAY;QACnB,IAAI,CAAC,YAAY,CAAC,UAAU,CAAC,IAAI,CAAC,CAAA;IACtC,CAAC;IAED,yCAAQ,GAAR,UAAS,GAAW;QAChB,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,UAAA,MAAM,IAAI,OAAA,MAAM,CAAC,GAAG,CAAC,EAAX,CAAW,CAAC,CAAA;IACjD,CAAC;IAED,wCAAO,GAAP;QACI,MAAM,CAAC,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,QAAQ,EAAE,CAAC;IAC7C,CAAC;IAlCQ,sBAAsB;QADlC,iBAAU,EAAE;yCAK0B,4BAAY;OAJtC,sBAAsB,CAqClC;IAAD,6BAAC;CAAA,AArCD,IAqCC;AArCY,wDAAsB","sourcesContent":["import {Injectable} from \"@angular/core\";\nimport {Observable} from \"rxjs/Observable\";\nimport {BehaviorSubject, Subject} from \"rxjs\";\nimport {LabelService} from \"../label.service\";\nimport {Rxios} from \"rxios\";\n\nexport class Label {\n  constructor(public key: string, public value: string, public help: string) {\n  }\n}\n\n@Injectable()\nexport class LabelProductionService {\n    private labels: Subject<Label[]> = new BehaviorSubject([])\n    private rxios : Rxios;\n\n    constructor( private labelService: LabelService) {\n\n        this.rxios = new Rxios({\n            baseURL: this.labelService.config.labelsFolderPath\n        })\n        //we do this to cache the result of the http request.  If we directly map the observer, as it is lazy, http calls will be done for every label\n        this.labelService.lang.mergeMap(l => this.rxios.get(\"labels\" + l + \".json\"))\n            .map((res : any) => res.json())\n            .catch(e => {\n                console.error(\"Error while loading lang file\")\n                return Observable.of({})\n            })\n            .map(res  => this.labels.next(res))\n            .subscribe()\n    }\n\n    public get languages(): string[] {\n        return this.labelService.languages;\n    }\n\n    changeLang(lang: string) {\n        this.labelService.changeLang(lang)\n    }\n\n    getLabel(key: string): Observable<Label> {\n        return this.labels.map(labels => labels[key])\n    }\n\n    getLang(){\n        return this.labelService.lang.getValue();\n    }\n\n\n}\n"]}