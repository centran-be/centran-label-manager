{"version":3,"file":"labelEdition.service.js","sourceRoot":"","sources":["labelEdition.service.ts"],"names":[],"mappings":"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","sourcesContent":["import {Injectable} from \"@angular/core\";\nimport {Observable} from \"rxjs/Observable\";\nimport {BehaviorSubject, Subject} from \"rxjs\";\nimport {LabelService} from \"../label.service\";\nimport {Rxios} from \"rxios\";\n\nexport class LabelEdition {\n  constructor(public key: string, public value: string, public help: string, public lang: string) {\n  }\n}\n\n\n@Injectable()\nexport class LabelEditionService {\n    private labels: Subject<LabelEdition[]> = new BehaviorSubject([])\n    private urlPrefix : string\n    private loaded: boolean = false;\n    private rxios : Rxios;\n\n    constructor(private labelService: LabelService) {\n        this.urlPrefix = \"/labelmanager/app/\" + this.labelService.appName;\n        this.rxios = new Rxios({\n            baseURL: this.urlPrefix\n        })\n        //we do this to cache the result of the http request.  If we directly map the observer, as it is lazy, http calls will be done for every label\n        this.labelService.lang.mergeMap(l => {\n            console.log(\"We are trying things \" + this.rxios.get(\"/file/\" + l).toPromise().then(value => value))\n            return this.rxios.get(\"/file/\" + l).toPromise()\n        })\n            .map((res: Promise<any>) => res)\n            .map((res : any) => {\n                console.log(\"Here \" + res)\n                const l = this.labels.next(res)\n                this.loaded = true\n                return l\n            })\n            .catch((error : any) => {\n                console.log(\"Error in here \" + error)\n                return Observable.throw(error);\n            })\n            .subscribe()\n    }\n\n    public get languages(): string[] {\n        return this.labelService.languages\n    }\n\n    changeLang(lang: string) {\n        this.labelService.changeLang(lang)\n    }\n\n    refreshLabels() {\n        this.changeLang(this.labelService.lang.getValue())\n    }\n\n    getMultilingualLabel(key: string): Observable<any> {\n        return this.rxios.get(\"/label/\" + key);\n    }\n\n    getLabel(key: string): Observable<LabelEdition> {\n        const service = this\n        return this.labels.map(labels => labels[key]).map(function (l) {\n            // if (l) {\n            //     l.key = key\n            // } else if (service.loaded) {\n            //     console.log(\"missing label :\" + key);\n            //     let nLabel:LabelEdition = new LabelEdition(key, null, null, service.getLang());\n            //     console.log(\"Missing label new \"+nLabel);\n            //     service\n            //         .update(nLabel)\n            //         .subscribe(\n            //             null,\n            //             (e : Error) => console.log(\"error\", e)\n            //         )\n            // }\n            return l\n        })\n    }\n\n    update(label: LabelEdition): Observable<{}> {\n        return this.rxios.put(\"/label\", label).do(v => this.refreshLabels())\n    }\n\n    getLang(){\n        return this.labelService.lang.getValue();\n    }\n\n}"]}